server_tokens off;

upstream {{ application_name }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen      80;
    server_name {{ nginx_server_name }};

    client_max_body_size 4G;

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }};

    # special route for the load balancer
    location /elb-status {
        access_log off;
        return 200;
    }

    location / {
        if (-f {{ virtualenv_path }}/maintenance_on.html) {
            return 503;
        }

        {% if allowed_hosts is defined %}
        ## Deny illegal Host headers
        if ($host !~* ^({{allowed_hosts|join('|')}})$ ) {
            return 444;
        }
        {% endif %}

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_read_timeout 300;

        # tilestache does not support the scale parameter in request paths (@2x)
        # this removes the scale parameter and adds a "_hq" (high quality) suffix
        # to the layer name.  The "high quality" route has to be implemented separately
        # in the tilestache configuration.
        rewrite ^\/(\w+)\/(\d+)\/(\d+)\/(\d+)@2x(.*)$ /$1_hq/$2/$3/$4$5 last;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ application_name }}_wsgi_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 504 /500.html;
    #location = /500.html {
    #    root {{ project_path }}/{{ application_name }}/templates/;
    #}

    error_page 503 /maintenance_on.html;
    location = /maintenance_on.html {
        root {{ virtualenv_path }}/;
    }
}
