server_tokens off;

add_header X-Frame-Options SAMEORIGIN;

upstream {{ application_name }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen      80;
    server_name {{ nginx_server_name }};

    client_max_body_size 4G;

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }};

    # special route for the load balancer
    location /elb-status {
        access_log off;
        return 200;
    }

    location /static/ {
        alias   {{ nginx_static_dir }};
    }

    location /sitemap.xml {
      root {{ nginx_static_dir }};
      try_files $uri @django;
    }

    location /media/ {
        alias   {{ nginx_media_dir }};
    }

    location /service-area/ {
      access_log off;
      proxy_pass {{ service_area_server }};
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      expires 30d;
      add_header Pragma public;
      add_header Cache-Control "public";
   }

    location /tmp/ {
       internal;
       alias   /tmp/;
    }

    location /files/ {
        internal;
        proxy_http_version     1.1;
        proxy_set_header       Authorization '';
        proxy_hide_header      x-amz-id-2;
        proxy_hide_header      x-amz-request-id;
        proxy_hide_header      Set-Cookie;
        proxy_ignore_headers   "Set-Cookie";
        proxy_buffering        off;
        proxy_intercept_errors on;
        proxy_pass https://s3.amazonaws.com/;
    }


    location / {
        try_files $uri $uri/ @django;
    }

    {% if development_mode is defined and development_mode %}
    # route to the debug process
    location @django {
        # pycharm will remotely run the app on port 8000, route traffic for web app to that port
        proxy_pass http://{{nginx_server_name}}:8000;
    }

    {% else %}
    location @django {
        if (-f {{ virtualenv_path }}/maintenance_on.html) {
            return 503;
        }

        if ($http_x_forwarded_proto = 'http') {
            return 301 https://$host$request_uri;
        }

        {% if django_allowed_hosts is defined %}
        ## Deny illegal Host headers
        if ($host !~* ^({{django_allowed_hosts|join('|')}})$ ) {
            return 444;
        }
        {% endif %}

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_read_timeout 300;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ application_name }}_wsgi_server;
            break;
        }
    }
    {% endif %}


    # Error pages
    error_page 500 502 504 /500.html;
    location = /500.html {
        root {{ project_path }}/{{ application_name }}/templates/;
    }

    error_page 503 /maintenance_on.html;
    location = /maintenance_on.html {
        root {{ virtualenv_path }}/;
    }
}
